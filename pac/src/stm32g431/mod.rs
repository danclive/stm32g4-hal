#![doc = "Peripheral access API for STM32G431 microcontrollers (generated using svd2rust v0.36.1 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.36.1/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#[doc = r"Number available in the NVIC for configuring priority"]
pub const NVIC_PRIO_BITS: u8 = 4;
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
pub use cortex_m::peripheral::Peripherals as CorePeripherals;
pub use cortex_m::peripheral::{CBP, CPUID, DCB, DWT, FPB, FPU, ITM, MPU, NVIC, SCB, SYST, TPIU};
#[cfg(feature = "rt")]
pub use cortex_m_rt::interrupt;
#[cfg(feature = "rt")]
unsafe extern "C" {
    fn WWDG();
    fn PVD_PVM();
    fn RTC_TAMP_CSS_LSE();
    fn RTC_WKUP();
    fn FLASH();
    fn RCC();
    fn EXTI0();
    fn EXTI1();
    fn EXTI2();
    fn EXTI3();
    fn EXTI4();
    fn DMA1_CH1();
    fn DMA1_CH2();
    fn DMA1_CH3();
    fn DMA1_CH4();
    fn DMA1_CH5();
    fn DMA1_CH6();
    fn ADC1_2();
    fn USB_HP();
    fn USB_LP();
    fn FDCAN1_IT0();
    fn FDCAN1_IT1();
    fn EXTI9_5();
    fn TIM1_BRK_TIM15();
    fn TIM1_UP_TIM16();
    fn TIM1_TRG_COM();
    fn TIM1_CC();
    fn TIM2();
    fn TIM3();
    fn TIM4();
    fn I2C1_EV();
    fn I2C1_ER();
    fn I2C2_EV();
    fn I2C2_ER();
    fn SPI1();
    fn SPI2();
    fn USART1();
    fn USART2();
    fn USART3();
    fn EXTI15_10();
    fn RTC_ALARM();
    fn USBWakeUP();
    fn TIM8_BRK();
    fn TIM8_UP();
    fn TIM8_TRG_COM();
    fn TIM8_CC();
    fn LPTIM1();
    fn SPI3();
    fn UART4();
    fn TIM6_DACUNDER();
    fn TIM7();
    fn DMA2_CH1();
    fn DMA2_CH2();
    fn DMA2_CH3();
    fn DMA2_CH4();
    fn DMA2_CH5();
    fn UCPD1();
    fn COMP1_2_3();
    fn COMP4_5_6();
    fn COMP7();
    fn CRS();
    fn SAI();
    fn TIM20_BRK();
    fn TIM20_UP();
    fn TIM20_TRG_COM();
    fn TIM20_CC();
    fn FPU();
    fn AES();
    fn RNG();
    fn LPUART();
    fn I2C3_EV();
    fn I2C3_ER();
    fn DMAMUX_OVR();
    fn DMA2_CH6();
    fn Cordic();
    fn FMAC();
}
#[doc(hidden)]
#[repr(C)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[unsafe(link_section = ".vector_table.interrupts")]
#[unsafe(no_mangle)]
pub static __INTERRUPTS: [Vector; 102] = [
    Vector { _handler: WWDG },
    Vector { _handler: PVD_PVM },
    Vector {
        _handler: RTC_TAMP_CSS_LSE,
    },
    Vector { _handler: RTC_WKUP },
    Vector { _handler: FLASH },
    Vector { _handler: RCC },
    Vector { _handler: EXTI0 },
    Vector { _handler: EXTI1 },
    Vector { _handler: EXTI2 },
    Vector { _handler: EXTI3 },
    Vector { _handler: EXTI4 },
    Vector { _handler: DMA1_CH1 },
    Vector { _handler: DMA1_CH2 },
    Vector { _handler: DMA1_CH3 },
    Vector { _handler: DMA1_CH4 },
    Vector { _handler: DMA1_CH5 },
    Vector { _handler: DMA1_CH6 },
    Vector { _reserved: 0 },
    Vector { _handler: ADC1_2 },
    Vector { _handler: USB_HP },
    Vector { _handler: USB_LP },
    Vector {
        _handler: FDCAN1_IT0,
    },
    Vector {
        _handler: FDCAN1_IT1,
    },
    Vector { _handler: EXTI9_5 },
    Vector {
        _handler: TIM1_BRK_TIM15,
    },
    Vector {
        _handler: TIM1_UP_TIM16,
    },
    Vector {
        _handler: TIM1_TRG_COM,
    },
    Vector { _handler: TIM1_CC },
    Vector { _handler: TIM2 },
    Vector { _handler: TIM3 },
    Vector { _handler: TIM4 },
    Vector { _handler: I2C1_EV },
    Vector { _handler: I2C1_ER },
    Vector { _handler: I2C2_EV },
    Vector { _handler: I2C2_ER },
    Vector { _handler: SPI1 },
    Vector { _handler: SPI2 },
    Vector { _handler: USART1 },
    Vector { _handler: USART2 },
    Vector { _handler: USART3 },
    Vector {
        _handler: EXTI15_10,
    },
    Vector {
        _handler: RTC_ALARM,
    },
    Vector {
        _handler: USBWakeUP,
    },
    Vector { _handler: TIM8_BRK },
    Vector { _handler: TIM8_UP },
    Vector {
        _handler: TIM8_TRG_COM,
    },
    Vector { _handler: TIM8_CC },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: LPTIM1 },
    Vector { _reserved: 0 },
    Vector { _handler: SPI3 },
    Vector { _handler: UART4 },
    Vector { _reserved: 0 },
    Vector {
        _handler: TIM6_DACUNDER,
    },
    Vector { _handler: TIM7 },
    Vector { _handler: DMA2_CH1 },
    Vector { _handler: DMA2_CH2 },
    Vector { _handler: DMA2_CH3 },
    Vector { _handler: DMA2_CH4 },
    Vector { _handler: DMA2_CH5 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: UCPD1 },
    Vector {
        _handler: COMP1_2_3,
    },
    Vector {
        _handler: COMP4_5_6,
    },
    Vector { _handler: COMP7 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: CRS },
    Vector { _handler: SAI },
    Vector {
        _handler: TIM20_BRK,
    },
    Vector { _handler: TIM20_UP },
    Vector {
        _handler: TIM20_TRG_COM,
    },
    Vector { _handler: TIM20_CC },
    Vector { _handler: FPU },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: AES },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: RNG },
    Vector { _handler: LPUART },
    Vector { _handler: I2C3_EV },
    Vector { _handler: I2C3_ER },
    Vector {
        _handler: DMAMUX_OVR,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: DMA2_CH6 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: Cordic },
    Vector { _handler: FMAC },
];
#[doc = r"Enumeration of all the interrupts."]
#[cfg_attr(feature = "defmt", derive(defmt::Format))]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    #[doc = "0 - Window Watchdog interrupt"]
    WWDG = 0,
    #[doc = "1 - PVD through EXTI line detection"]
    PVD_PVM = 1,
    #[doc = "2 - RTC_TAMP_CSS_LSE"]
    RTC_TAMP_CSS_LSE = 2,
    #[doc = "3 - RTC Wakeup timer"]
    RTC_WKUP = 3,
    #[doc = "4 - FLASH"]
    FLASH = 4,
    #[doc = "5 - RCC global interrupt"]
    RCC = 5,
    #[doc = "6 - EXTI Line0 interrupt"]
    EXTI0 = 6,
    #[doc = "7 - EXTI Line1 interrupt"]
    EXTI1 = 7,
    #[doc = "8 - EXTI Line2 interrupt"]
    EXTI2 = 8,
    #[doc = "9 - EXTI Line3 interrupt"]
    EXTI3 = 9,
    #[doc = "10 - EXTI Line4 interrupt"]
    EXTI4 = 10,
    #[doc = "11 - DMA1 channel 1 interrupt"]
    DMA1_CH1 = 11,
    #[doc = "12 - DMA1 channel 2 interrupt"]
    DMA1_CH2 = 12,
    #[doc = "13 - DMA1 channel 3 interrupt"]
    DMA1_CH3 = 13,
    #[doc = "14 - DMA1 channel 4 interrupt"]
    DMA1_CH4 = 14,
    #[doc = "15 - DMA1 channel 5 interrupt"]
    DMA1_CH5 = 15,
    #[doc = "16 - DMA1 channel 6 interrupt"]
    DMA1_CH6 = 16,
    #[doc = "18 - ADC1 and ADC2 global interrupt"]
    ADC1_2 = 18,
    #[doc = "19 - USB_HP"]
    USB_HP = 19,
    #[doc = "20 - USB_LP"]
    USB_LP = 20,
    #[doc = "21 - FDCAN1 interrupt 0"]
    FDCAN1_IT0 = 21,
    #[doc = "22 - FDCAN1 interrupt 1"]
    FDCAN1_IT1 = 22,
    #[doc = "23 - EXTI9_5"]
    EXTI9_5 = 23,
    #[doc = "24 - TIM1_BRK_TIM15"]
    TIM1_BRK_TIM15 = 24,
    #[doc = "25 - TIM1_UP_TIM16"]
    TIM1_UP_TIM16 = 25,
    #[doc = "26 - TIM1_TRG_COM/"]
    TIM1_TRG_COM = 26,
    #[doc = "27 - TIM1 capture compare interrupt"]
    TIM1_CC = 27,
    #[doc = "28 - TIM2"]
    TIM2 = 28,
    #[doc = "29 - TIM3"]
    TIM3 = 29,
    #[doc = "30 - TIM4"]
    TIM4 = 30,
    #[doc = "31 - I2C1_EV"]
    I2C1_EV = 31,
    #[doc = "32 - I2C1_ER"]
    I2C1_ER = 32,
    #[doc = "33 - I2C2_EV"]
    I2C2_EV = 33,
    #[doc = "34 - I2C2_ER"]
    I2C2_ER = 34,
    #[doc = "35 - SPI1"]
    SPI1 = 35,
    #[doc = "36 - SPI2"]
    SPI2 = 36,
    #[doc = "37 - USART1"]
    USART1 = 37,
    #[doc = "38 - USART2"]
    USART2 = 38,
    #[doc = "39 - USART3"]
    USART3 = 39,
    #[doc = "40 - EXTI15_10"]
    EXTI15_10 = 40,
    #[doc = "41 - RTC_ALARM"]
    RTC_ALARM = 41,
    #[doc = "42 - USBWakeUP"]
    USBWakeUP = 42,
    #[doc = "43 - TIM8_BRK"]
    TIM8_BRK = 43,
    #[doc = "44 - TIM8_UP"]
    TIM8_UP = 44,
    #[doc = "45 - TIM8_TRG_COM"]
    TIM8_TRG_COM = 45,
    #[doc = "46 - TIM8_CC"]
    TIM8_CC = 46,
    #[doc = "49 - LPTIM1"]
    LPTIM1 = 49,
    #[doc = "51 - SPI3"]
    SPI3 = 51,
    #[doc = "52 - UART4"]
    UART4 = 52,
    #[doc = "54 - TIM6_DACUNDER"]
    TIM6_DACUNDER = 54,
    #[doc = "55 - TIM7"]
    TIM7 = 55,
    #[doc = "56 - DMA2_CH1"]
    DMA2_CH1 = 56,
    #[doc = "57 - DMA2_CH2"]
    DMA2_CH2 = 57,
    #[doc = "58 - DMA2_CH3"]
    DMA2_CH3 = 58,
    #[doc = "59 - DMA2_CH4"]
    DMA2_CH4 = 59,
    #[doc = "60 - DMA2_CH5"]
    DMA2_CH5 = 60,
    #[doc = "63 - UCPD1"]
    UCPD1 = 63,
    #[doc = "64 - COMP1_2_3"]
    COMP1_2_3 = 64,
    #[doc = "65 - COMP4_5_6"]
    COMP4_5_6 = 65,
    #[doc = "66 - COMP7"]
    COMP7 = 66,
    #[doc = "75 - CRS"]
    CRS = 75,
    #[doc = "76 - SAI"]
    SAI = 76,
    #[doc = "77 - TIM20_BRK"]
    TIM20_BRK = 77,
    #[doc = "78 - TIM20_UP"]
    TIM20_UP = 78,
    #[doc = "79 - TIM20_TRG_COM"]
    TIM20_TRG_COM = 79,
    #[doc = "80 - TIM20_CC"]
    TIM20_CC = 80,
    #[doc = "81 - Floating point interrupt"]
    FPU = 81,
    #[doc = "85 - AES"]
    AES = 85,
    #[doc = "90 - RNG"]
    RNG = 90,
    #[doc = "91 - LPUART"]
    LPUART = 91,
    #[doc = "92 - I2C3_EV"]
    I2C3_EV = 92,
    #[doc = "93 - I2C3_ER"]
    I2C3_ER = 93,
    #[doc = "94 - DMAMUX_OVR"]
    DMAMUX_OVR = 94,
    #[doc = "97 - DMA2_CH6"]
    DMA2_CH6 = 97,
    #[doc = "100 - Cordic"]
    Cordic = 100,
    #[doc = "101 - FMAC"]
    FMAC = 101,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
#[doc = "Advanced-timers"]
pub type Tim2 = crate::Periph<tim2::RegisterBlock, 0x4000_0000>;
impl core::fmt::Debug for Tim2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim2").finish()
    }
}
#[doc = "Advanced-timers"]
pub mod tim2;
#[doc = "Advanced-timers"]
pub type Tim3 = crate::Periph<tim3::RegisterBlock, 0x4000_0400>;
impl core::fmt::Debug for Tim3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim3").finish()
    }
}
#[doc = "Advanced-timers"]
pub mod tim3;
#[doc = "Advanced-timers"]
pub type Tim4 = crate::Periph<tim3::RegisterBlock, 0x4000_0800>;
impl core::fmt::Debug for Tim4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim4").finish()
    }
}
#[doc = "Advanced-timers"]
pub use self::tim3 as tim4;
#[doc = "Basic-timers"]
pub type Tim6 = crate::Periph<tim6::RegisterBlock, 0x4000_1000>;
impl core::fmt::Debug for Tim6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim6").finish()
    }
}
#[doc = "Basic-timers"]
pub mod tim6;
#[doc = "Basic-timers"]
pub type Tim7 = crate::Periph<tim6::RegisterBlock, 0x4000_1400>;
impl core::fmt::Debug for Tim7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim7").finish()
    }
}
#[doc = "Basic-timers"]
pub use self::tim6 as tim7;
#[doc = "CRS"]
pub type Crs = crate::Periph<crs::RegisterBlock, 0x4000_2000>;
impl core::fmt::Debug for Crs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Crs").finish()
    }
}
#[doc = "CRS"]
pub mod crs;
#[doc = "Tamper and backup registers"]
pub type Tamp = crate::Periph<tamp::RegisterBlock, 0x4000_2400>;
impl core::fmt::Debug for Tamp {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tamp").finish()
    }
}
#[doc = "Tamper and backup registers"]
pub mod tamp;
#[doc = "Real-time clock"]
pub type Rtc = crate::Periph<rtc::RegisterBlock, 0x4000_2800>;
impl core::fmt::Debug for Rtc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rtc").finish()
    }
}
#[doc = "Real-time clock"]
pub mod rtc;
#[doc = "System window watchdog"]
pub type Wwdg = crate::Periph<wwdg::RegisterBlock, 0x4000_2c00>;
impl core::fmt::Debug for Wwdg {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Wwdg").finish()
    }
}
#[doc = "System window watchdog"]
pub mod wwdg;
#[doc = "WinWATCHDOG"]
pub type Iwdg = crate::Periph<iwdg::RegisterBlock, 0x4000_3000>;
impl core::fmt::Debug for Iwdg {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Iwdg").finish()
    }
}
#[doc = "WinWATCHDOG"]
pub mod iwdg;
#[doc = "Serial peripheral interface/Inter-IC sound"]
pub type Spi2 = crate::Periph<spi1::RegisterBlock, 0x4000_3800>;
impl core::fmt::Debug for Spi2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi2").finish()
    }
}
#[doc = "Serial peripheral interface/Inter-IC sound"]
pub use self::spi1 as spi2;
#[doc = "Serial peripheral interface/Inter-IC sound"]
pub type Spi3 = crate::Periph<spi1::RegisterBlock, 0x4000_3c00>;
impl core::fmt::Debug for Spi3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi3").finish()
    }
}
#[doc = "Serial peripheral interface/Inter-IC sound"]
pub use self::spi1 as spi3;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Usart2 = crate::Periph<usart1::RegisterBlock, 0x4000_4400>;
impl core::fmt::Debug for Usart2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usart2").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub use self::usart1 as usart2;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Usart3 = crate::Periph<usart1::RegisterBlock, 0x4000_4800>;
impl core::fmt::Debug for Usart3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usart3").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub use self::usart1 as usart3;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Uart4 = crate::Periph<uart4::RegisterBlock, 0x4000_4c00>;
impl core::fmt::Debug for Uart4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart4").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub mod uart4;
#[doc = "Inter-integrated circuit"]
pub type I2c1 = crate::Periph<i2c1::RegisterBlock, 0x4000_5400>;
impl core::fmt::Debug for I2c1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c1").finish()
    }
}
#[doc = "Inter-integrated circuit"]
pub mod i2c1;
#[doc = "Inter-integrated circuit"]
pub type I2c2 = crate::Periph<i2c1::RegisterBlock, 0x4000_5800>;
impl core::fmt::Debug for I2c2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c2").finish()
    }
}
#[doc = "Inter-integrated circuit"]
pub use self::i2c1 as i2c2;
#[doc = "USB_FS_device"]
pub type UsbFsDevice = crate::Periph<usb_fs_device::RegisterBlock, 0x4000_5c00>;
impl core::fmt::Debug for UsbFsDevice {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UsbFsDevice").finish()
    }
}
#[doc = "USB_FS_device"]
pub mod usb_fs_device;
#[doc = "DMA controller"]
pub type Dma2 = crate::Periph<dma1::RegisterBlock, 0x4000_6c00>;
impl core::fmt::Debug for Dma2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dma2").finish()
    }
}
#[doc = "DMA controller"]
pub use self::dma1 as dma2;
#[doc = "Power control"]
pub type Pwr = crate::Periph<pwr::RegisterBlock, 0x4000_7000>;
impl core::fmt::Debug for Pwr {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pwr").finish()
    }
}
#[doc = "Power control"]
pub mod pwr;
#[doc = "Inter-integrated circuit"]
pub type I2c3 = crate::Periph<i2c1::RegisterBlock, 0x4000_7800>;
impl core::fmt::Debug for I2c3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c3").finish()
    }
}
#[doc = "Inter-integrated circuit"]
pub use self::i2c1 as i2c3;
#[doc = "Low power timer"]
pub type Lptimer1 = crate::Periph<lptimer1::RegisterBlock, 0x4000_7c00>;
impl core::fmt::Debug for Lptimer1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Lptimer1").finish()
    }
}
#[doc = "Low power timer"]
pub mod lptimer1;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Lpuart1 = crate::Periph<lpuart1::RegisterBlock, 0x4000_8000>;
impl core::fmt::Debug for Lpuart1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Lpuart1").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub mod lpuart1;
#[doc = "UCPD1"]
pub type Ucpd1 = crate::Periph<ucpd1::RegisterBlock, 0x4000_a000>;
impl core::fmt::Debug for Ucpd1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Ucpd1").finish()
    }
}
#[doc = "UCPD1"]
pub mod ucpd1;
#[doc = "FDCAN 1"]
pub type Fdcan1 = crate::Periph<fdcan1::RegisterBlock, 0x4000_a400>;
impl core::fmt::Debug for Fdcan1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Fdcan1").finish()
    }
}
#[doc = "FDCAN 1"]
pub mod fdcan1;
#[doc = "System configuration controller"]
pub type Syscfg = crate::Periph<syscfg::RegisterBlock, 0x4001_0000>;
impl core::fmt::Debug for Syscfg {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Syscfg").finish()
    }
}
#[doc = "System configuration controller"]
pub mod syscfg;
#[doc = "Voltage reference buffer"]
pub type Vrefbuf = crate::Periph<vrefbuf::RegisterBlock, 0x4001_0030>;
impl core::fmt::Debug for Vrefbuf {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Vrefbuf").finish()
    }
}
#[doc = "Voltage reference buffer"]
pub mod vrefbuf;
#[doc = "Comparator control and status register"]
pub type Comp = crate::Periph<comp::RegisterBlock, 0x4001_0200>;
impl core::fmt::Debug for Comp {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Comp").finish()
    }
}
#[doc = "Comparator control and status register"]
pub mod comp;
#[doc = "Operational amplifiers"]
pub type Opamp = crate::Periph<opamp::RegisterBlock, 0x4001_0300>;
impl core::fmt::Debug for Opamp {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Opamp").finish()
    }
}
#[doc = "Operational amplifiers"]
pub mod opamp;
#[doc = "External interrupt/event controller"]
pub type Exti = crate::Periph<exti::RegisterBlock, 0x4001_0400>;
impl core::fmt::Debug for Exti {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Exti").finish()
    }
}
#[doc = "External interrupt/event controller"]
pub mod exti;
#[doc = "Advanced-timers"]
pub type Tim1 = crate::Periph<tim1::RegisterBlock, 0x4001_2c00>;
impl core::fmt::Debug for Tim1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim1").finish()
    }
}
#[doc = "Advanced-timers"]
pub mod tim1;
#[doc = "Serial peripheral interface/Inter-IC sound"]
pub type Spi1 = crate::Periph<spi1::RegisterBlock, 0x4001_3000>;
impl core::fmt::Debug for Spi1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi1").finish()
    }
}
#[doc = "Serial peripheral interface/Inter-IC sound"]
pub mod spi1;
#[doc = "Advanced-timers"]
pub type Tim8 = crate::Periph<tim1::RegisterBlock, 0x4001_3400>;
impl core::fmt::Debug for Tim8 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim8").finish()
    }
}
#[doc = "Advanced-timers"]
pub use self::tim1 as tim8;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Usart1 = crate::Periph<usart1::RegisterBlock, 0x4001_3800>;
impl core::fmt::Debug for Usart1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usart1").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub mod usart1;
#[doc = "General purpose timers"]
pub type Tim15 = crate::Periph<tim15::RegisterBlock, 0x4001_4000>;
impl core::fmt::Debug for Tim15 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim15").finish()
    }
}
#[doc = "General purpose timers"]
pub mod tim15;
#[doc = "General purpose timers"]
pub type Tim16 = crate::Periph<tim16::RegisterBlock, 0x4001_4400>;
impl core::fmt::Debug for Tim16 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim16").finish()
    }
}
#[doc = "General purpose timers"]
pub mod tim16;
#[doc = "General purpose timers"]
pub type Tim17 = crate::Periph<tim16::RegisterBlock, 0x4001_4800>;
impl core::fmt::Debug for Tim17 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim17").finish()
    }
}
#[doc = "General purpose timers"]
pub use self::tim16 as tim17;
#[doc = "Advanced-timers"]
pub type Tim20 = crate::Periph<tim1::RegisterBlock, 0x4001_5000>;
impl core::fmt::Debug for Tim20 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim20").finish()
    }
}
#[doc = "Advanced-timers"]
pub use self::tim1 as tim20;
#[doc = "Serial audio interface"]
pub type Sai = crate::Periph<sai::RegisterBlock, 0x4001_5400>;
impl core::fmt::Debug for Sai {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sai").finish()
    }
}
#[doc = "Serial audio interface"]
pub mod sai;
#[doc = "DMA controller"]
pub type Dma1 = crate::Periph<dma1::RegisterBlock, 0x4002_0000>;
impl core::fmt::Debug for Dma1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dma1").finish()
    }
}
#[doc = "DMA controller"]
pub mod dma1;
#[doc = "DMAMUX"]
pub type Dmamux = crate::Periph<dmamux::RegisterBlock, 0x4002_0800>;
impl core::fmt::Debug for Dmamux {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dmamux").finish()
    }
}
#[doc = "DMAMUX"]
pub mod dmamux;
#[doc = "CORDIC Co-processor"]
pub type Cordic = crate::Periph<cordic::RegisterBlock, 0x4002_0c00>;
impl core::fmt::Debug for Cordic {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Cordic").finish()
    }
}
#[doc = "CORDIC Co-processor"]
pub mod cordic;
#[doc = "Reset and clock control"]
pub type Rcc = crate::Periph<rcc::RegisterBlock, 0x4002_1000>;
impl core::fmt::Debug for Rcc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rcc").finish()
    }
}
#[doc = "Reset and clock control"]
pub mod rcc;
#[doc = "Filter Math Accelerator"]
pub type Fmac = crate::Periph<fmac::RegisterBlock, 0x4002_1400>;
impl core::fmt::Debug for Fmac {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Fmac").finish()
    }
}
#[doc = "Filter Math Accelerator"]
pub mod fmac;
#[doc = "Flash"]
pub type Flash = crate::Periph<flash::RegisterBlock, 0x4002_2000>;
impl core::fmt::Debug for Flash {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Flash").finish()
    }
}
#[doc = "Flash"]
pub mod flash;
#[doc = "Cyclic redundancy check calculation unit"]
pub type Crc = crate::Periph<crc::RegisterBlock, 0x4002_3000>;
impl core::fmt::Debug for Crc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Crc").finish()
    }
}
#[doc = "Cyclic redundancy check calculation unit"]
pub mod crc;
#[doc = "General-purpose I/Os"]
pub type Gpioa = crate::Periph<gpioa::RegisterBlock, 0x4800_0000>;
impl core::fmt::Debug for Gpioa {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioa").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub mod gpioa;
#[doc = "General-purpose I/Os"]
pub type Gpiob = crate::Periph<gpiob::RegisterBlock, 0x4800_0400>;
impl core::fmt::Debug for Gpiob {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpiob").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub mod gpiob;
#[doc = "General-purpose I/Os"]
pub type Gpioc = crate::Periph<gpioc::RegisterBlock, 0x4800_0800>;
impl core::fmt::Debug for Gpioc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioc").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub mod gpioc;
#[doc = "General-purpose I/Os"]
pub type Gpiod = crate::Periph<gpioc::RegisterBlock, 0x4800_0c00>;
impl core::fmt::Debug for Gpiod {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpiod").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub use self::gpioc as gpiod;
#[doc = "General-purpose I/Os"]
pub type Gpioe = crate::Periph<gpioc::RegisterBlock, 0x4800_1000>;
impl core::fmt::Debug for Gpioe {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioe").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub use self::gpioc as gpioe;
#[doc = "General-purpose I/Os"]
pub type Gpiof = crate::Periph<gpioc::RegisterBlock, 0x4800_1400>;
impl core::fmt::Debug for Gpiof {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpiof").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub use self::gpioc as gpiof;
#[doc = "General-purpose I/Os"]
pub type Gpiog = crate::Periph<gpioc::RegisterBlock, 0x4800_1800>;
impl core::fmt::Debug for Gpiog {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpiog").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub use self::gpioc as gpiog;
#[doc = "Analog-to-Digital Converter"]
pub type Adc1 = crate::Periph<adc1::RegisterBlock, 0x5000_0000>;
impl core::fmt::Debug for Adc1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc1").finish()
    }
}
#[doc = "Analog-to-Digital Converter"]
pub mod adc1;
#[doc = "Analog-to-Digital Converter"]
pub type Adc2 = crate::Periph<adc1::RegisterBlock, 0x5000_0100>;
impl core::fmt::Debug for Adc2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc2").finish()
    }
}
#[doc = "Analog-to-Digital Converter"]
pub use self::adc1 as adc2;
#[doc = "Analog-to-Digital Converter"]
pub type Adc12Common = crate::Periph<adc12_common::RegisterBlock, 0x5000_0300>;
impl core::fmt::Debug for Adc12Common {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc12Common").finish()
    }
}
#[doc = "Analog-to-Digital Converter"]
pub mod adc12_common;
#[doc = "Analog-to-Digital Converter"]
pub type Adc345Common = crate::Periph<adc12_common::RegisterBlock, 0x5000_0700>;
impl core::fmt::Debug for Adc345Common {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc345Common").finish()
    }
}
#[doc = "Analog-to-Digital Converter"]
pub use self::adc12_common as adc345_common;
#[doc = "Digital-to-analog converter"]
pub type Dac1 = crate::Periph<dac1::RegisterBlock, 0x5000_0800>;
impl core::fmt::Debug for Dac1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dac1").finish()
    }
}
#[doc = "Digital-to-analog converter"]
pub mod dac1;
#[doc = "Digital-to-analog converter"]
pub type Dac2 = crate::Periph<dac1::RegisterBlock, 0x5000_0c00>;
impl core::fmt::Debug for Dac2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dac2").finish()
    }
}
#[doc = "Digital-to-analog converter"]
pub use self::dac1 as dac2;
#[doc = "Digital-to-analog converter"]
pub type Dac3 = crate::Periph<dac1::RegisterBlock, 0x5000_1000>;
impl core::fmt::Debug for Dac3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dac3").finish()
    }
}
#[doc = "Digital-to-analog converter"]
pub use self::dac1 as dac3;
#[doc = "Digital-to-analog converter"]
pub type Dac4 = crate::Periph<dac1::RegisterBlock, 0x5000_1400>;
impl core::fmt::Debug for Dac4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dac4").finish()
    }
}
#[doc = "Digital-to-analog converter"]
pub use self::dac1 as dac4;
#[doc = "Advanced encryption standard hardware accelerator"]
pub type Aes = crate::Periph<aes::RegisterBlock, 0x5006_0000>;
impl core::fmt::Debug for Aes {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Aes").finish()
    }
}
#[doc = "Advanced encryption standard hardware accelerator"]
pub mod aes;
#[doc = "Random number generator"]
pub type Rng = crate::Periph<rng::RegisterBlock, 0x5006_0800>;
impl core::fmt::Debug for Rng {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rng").finish()
    }
}
#[doc = "Random number generator"]
pub mod rng;
#[doc = "Debug support"]
pub type Dbgmcu = crate::Periph<dbgmcu::RegisterBlock, 0xe004_2000>;
impl core::fmt::Debug for Dbgmcu {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dbgmcu").finish()
    }
}
#[doc = "Debug support"]
pub mod dbgmcu;
#[unsafe(no_mangle)]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r" All the peripherals."]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "TIM2"]
    pub tim2: Tim2,
    #[doc = "TIM3"]
    pub tim3: Tim3,
    #[doc = "TIM4"]
    pub tim4: Tim4,
    #[doc = "TIM6"]
    pub tim6: Tim6,
    #[doc = "TIM7"]
    pub tim7: Tim7,
    #[doc = "CRS"]
    pub crs: Crs,
    #[doc = "TAMP"]
    pub tamp: Tamp,
    #[doc = "RTC"]
    pub rtc: Rtc,
    #[doc = "WWDG"]
    pub wwdg: Wwdg,
    #[doc = "IWDG"]
    pub iwdg: Iwdg,
    #[doc = "SPI2"]
    pub spi2: Spi2,
    #[doc = "SPI3"]
    pub spi3: Spi3,
    #[doc = "USART2"]
    pub usart2: Usart2,
    #[doc = "USART3"]
    pub usart3: Usart3,
    #[doc = "UART4"]
    pub uart4: Uart4,
    #[doc = "I2C1"]
    pub i2c1: I2c1,
    #[doc = "I2C2"]
    pub i2c2: I2c2,
    #[doc = "USB_FS_device"]
    pub usb_fs_device: UsbFsDevice,
    #[doc = "DMA2"]
    pub dma2: Dma2,
    #[doc = "PWR"]
    pub pwr: Pwr,
    #[doc = "I2C3"]
    pub i2c3: I2c3,
    #[doc = "LPTIMER1"]
    pub lptimer1: Lptimer1,
    #[doc = "LPUART1"]
    pub lpuart1: Lpuart1,
    #[doc = "UCPD1"]
    pub ucpd1: Ucpd1,
    #[doc = "FDCAN1"]
    pub fdcan1: Fdcan1,
    #[doc = "SYSCFG"]
    pub syscfg: Syscfg,
    #[doc = "VREFBUF"]
    pub vrefbuf: Vrefbuf,
    #[doc = "COMP"]
    pub comp: Comp,
    #[doc = "OPAMP"]
    pub opamp: Opamp,
    #[doc = "EXTI"]
    pub exti: Exti,
    #[doc = "TIM1"]
    pub tim1: Tim1,
    #[doc = "SPI1"]
    pub spi1: Spi1,
    #[doc = "TIM8"]
    pub tim8: Tim8,
    #[doc = "USART1"]
    pub usart1: Usart1,
    #[doc = "TIM15"]
    pub tim15: Tim15,
    #[doc = "TIM16"]
    pub tim16: Tim16,
    #[doc = "TIM17"]
    pub tim17: Tim17,
    #[doc = "TIM20"]
    pub tim20: Tim20,
    #[doc = "SAI"]
    pub sai: Sai,
    #[doc = "DMA1"]
    pub dma1: Dma1,
    #[doc = "DMAMUX"]
    pub dmamux: Dmamux,
    #[doc = "CORDIC"]
    pub cordic: Cordic,
    #[doc = "RCC"]
    pub rcc: Rcc,
    #[doc = "FMAC"]
    pub fmac: Fmac,
    #[doc = "FLASH"]
    pub flash: Flash,
    #[doc = "CRC"]
    pub crc: Crc,
    #[doc = "GPIOA"]
    pub gpioa: Gpioa,
    #[doc = "GPIOB"]
    pub gpiob: Gpiob,
    #[doc = "GPIOC"]
    pub gpioc: Gpioc,
    #[doc = "GPIOD"]
    pub gpiod: Gpiod,
    #[doc = "GPIOE"]
    pub gpioe: Gpioe,
    #[doc = "GPIOF"]
    pub gpiof: Gpiof,
    #[doc = "GPIOG"]
    pub gpiog: Gpiog,
    #[doc = "ADC1"]
    pub adc1: Adc1,
    #[doc = "ADC2"]
    pub adc2: Adc2,
    #[doc = "ADC12_Common"]
    pub adc12_common: Adc12Common,
    #[doc = "ADC345_Common"]
    pub adc345_common: Adc345Common,
    #[doc = "DAC1"]
    pub dac1: Dac1,
    #[doc = "DAC2"]
    pub dac2: Dac2,
    #[doc = "DAC3"]
    pub dac3: Dac3,
    #[doc = "DAC4"]
    pub dac4: Dac4,
    #[doc = "AES"]
    pub aes: Aes,
    #[doc = "RNG"]
    pub rng: Rng,
    #[doc = "DBGMCU"]
    pub dbgmcu: Dbgmcu,
}
impl Peripherals {
    #[doc = r" Returns all the peripherals *once*."]
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    #[doc = r" Unchecked version of `Peripherals::take`."]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Each of the returned peripherals must be used at most once."]
    #[inline]
    pub unsafe fn steal() -> Self {
        unsafe { DEVICE_PERIPHERALS = true };
        Peripherals {
            tim2: unsafe { Tim2::steal() },
            tim3: unsafe { Tim3::steal() },
            tim4: unsafe { Tim4::steal() },
            tim6: unsafe { Tim6::steal() },
            tim7: unsafe { Tim7::steal() },
            crs: unsafe { Crs::steal() },
            tamp: unsafe { Tamp::steal() },
            rtc: unsafe { Rtc::steal() },
            wwdg: unsafe { Wwdg::steal() },
            iwdg: unsafe { Iwdg::steal() },
            spi2: unsafe { Spi2::steal() },
            spi3: unsafe { Spi3::steal() },
            usart2: unsafe { Usart2::steal() },
            usart3: unsafe { Usart3::steal() },
            uart4: unsafe { Uart4::steal() },
            i2c1: unsafe { I2c1::steal() },
            i2c2: unsafe { I2c2::steal() },
            usb_fs_device: unsafe { UsbFsDevice::steal() },
            dma2: unsafe { Dma2::steal() },
            pwr: unsafe { Pwr::steal() },
            i2c3: unsafe { I2c3::steal() },
            lptimer1: unsafe { Lptimer1::steal() },
            lpuart1: unsafe { Lpuart1::steal() },
            ucpd1: unsafe { Ucpd1::steal() },
            fdcan1: unsafe { Fdcan1::steal() },
            syscfg: unsafe { Syscfg::steal() },
            vrefbuf: unsafe { Vrefbuf::steal() },
            comp: unsafe { Comp::steal() },
            opamp: unsafe { Opamp::steal() },
            exti: unsafe { Exti::steal() },
            tim1: unsafe { Tim1::steal() },
            spi1: unsafe { Spi1::steal() },
            tim8: unsafe { Tim8::steal() },
            usart1: unsafe { Usart1::steal() },
            tim15: unsafe { Tim15::steal() },
            tim16: unsafe { Tim16::steal() },
            tim17: unsafe { Tim17::steal() },
            tim20: unsafe { Tim20::steal() },
            sai: unsafe { Sai::steal() },
            dma1: unsafe { Dma1::steal() },
            dmamux: unsafe { Dmamux::steal() },
            cordic: unsafe { Cordic::steal() },
            rcc: unsafe { Rcc::steal() },
            fmac: unsafe { Fmac::steal() },
            flash: unsafe { Flash::steal() },
            crc: unsafe { Crc::steal() },
            gpioa: unsafe { Gpioa::steal() },
            gpiob: unsafe { Gpiob::steal() },
            gpioc: unsafe { Gpioc::steal() },
            gpiod: unsafe { Gpiod::steal() },
            gpioe: unsafe { Gpioe::steal() },
            gpiof: unsafe { Gpiof::steal() },
            gpiog: unsafe { Gpiog::steal() },
            adc1: unsafe { Adc1::steal() },
            adc2: unsafe { Adc2::steal() },
            adc12_common: unsafe { Adc12Common::steal() },
            adc345_common: unsafe { Adc345Common::steal() },
            dac1: unsafe { Dac1::steal() },
            dac2: unsafe { Dac2::steal() },
            dac3: unsafe { Dac3::steal() },
            dac4: unsafe { Dac4::steal() },
            aes: unsafe { Aes::steal() },
            rng: unsafe { Rng::steal() },
            dbgmcu: unsafe { Dbgmcu::steal() },
        }
    }
}
