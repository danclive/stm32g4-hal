#[doc = "Register `ILS` reader"]
pub type R = crate::R<IlsSpec>;
#[doc = "Register `ILS` writer"]
pub type W = crate::W<IlsSpec>;
#[doc = "Field `RxFIFO0` reader - RxFIFO0"]
pub type RxFifo0R = crate::BitReader;
#[doc = "Field `RxFIFO0` writer - RxFIFO0"]
pub type RxFifo0W<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `RxFIFO1` reader - RxFIFO1"]
pub type RxFifo1R = crate::BitReader;
#[doc = "Field `RxFIFO1` writer - RxFIFO1"]
pub type RxFifo1W<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `SMSG` reader - SMSG"]
pub type SmsgR = crate::BitReader;
#[doc = "Field `SMSG` writer - SMSG"]
pub type SmsgW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `TFERR` reader - TFERR"]
pub type TferrR = crate::BitReader;
#[doc = "Field `TFERR` writer - TFERR"]
pub type TferrW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `MISC` reader - MISC"]
pub type MiscR = crate::BitReader;
#[doc = "Field `MISC` writer - MISC"]
pub type MiscW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `BERR` reader - BERR"]
pub type BerrR = crate::BitReader;
#[doc = "Field `BERR` writer - BERR"]
pub type BerrW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `PERR` reader - PERR"]
pub type PerrR = crate::BitReader;
#[doc = "Field `PERR` writer - PERR"]
pub type PerrW<'a, REG> = crate::BitWriter<'a, REG>;
impl R {
    #[doc = "Bit 0 - RxFIFO0"]
    #[inline(always)]
    pub fn rx_fifo0(&self) -> RxFifo0R {
        RxFifo0R::new((self.bits & 1) != 0)
    }
    #[doc = "Bit 1 - RxFIFO1"]
    #[inline(always)]
    pub fn rx_fifo1(&self) -> RxFifo1R {
        RxFifo1R::new(((self.bits >> 1) & 1) != 0)
    }
    #[doc = "Bit 2 - SMSG"]
    #[inline(always)]
    pub fn smsg(&self) -> SmsgR {
        SmsgR::new(((self.bits >> 2) & 1) != 0)
    }
    #[doc = "Bit 3 - TFERR"]
    #[inline(always)]
    pub fn tferr(&self) -> TferrR {
        TferrR::new(((self.bits >> 3) & 1) != 0)
    }
    #[doc = "Bit 4 - MISC"]
    #[inline(always)]
    pub fn misc(&self) -> MiscR {
        MiscR::new(((self.bits >> 4) & 1) != 0)
    }
    #[doc = "Bit 5 - BERR"]
    #[inline(always)]
    pub fn berr(&self) -> BerrR {
        BerrR::new(((self.bits >> 5) & 1) != 0)
    }
    #[doc = "Bit 6 - PERR"]
    #[inline(always)]
    pub fn perr(&self) -> PerrR {
        PerrR::new(((self.bits >> 6) & 1) != 0)
    }
}
impl core::fmt::Debug for R {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ILS")
            .field("rx_fifo0", &self.rx_fifo0())
            .field("rx_fifo1", &self.rx_fifo1())
            .field("smsg", &self.smsg())
            .field("tferr", &self.tferr())
            .field("misc", &self.misc())
            .field("berr", &self.berr())
            .field("perr", &self.perr())
            .finish()
    }
}
impl W {
    #[doc = "Bit 0 - RxFIFO0"]
    #[inline(always)]
    #[must_use]
    pub fn rx_fifo0(&mut self) -> RxFifo0W<IlsSpec> {
        RxFifo0W::new(self, 0)
    }
    #[doc = "Bit 1 - RxFIFO1"]
    #[inline(always)]
    #[must_use]
    pub fn rx_fifo1(&mut self) -> RxFifo1W<IlsSpec> {
        RxFifo1W::new(self, 1)
    }
    #[doc = "Bit 2 - SMSG"]
    #[inline(always)]
    #[must_use]
    pub fn smsg(&mut self) -> SmsgW<IlsSpec> {
        SmsgW::new(self, 2)
    }
    #[doc = "Bit 3 - TFERR"]
    #[inline(always)]
    #[must_use]
    pub fn tferr(&mut self) -> TferrW<IlsSpec> {
        TferrW::new(self, 3)
    }
    #[doc = "Bit 4 - MISC"]
    #[inline(always)]
    #[must_use]
    pub fn misc(&mut self) -> MiscW<IlsSpec> {
        MiscW::new(self, 4)
    }
    #[doc = "Bit 5 - BERR"]
    #[inline(always)]
    #[must_use]
    pub fn berr(&mut self) -> BerrW<IlsSpec> {
        BerrW::new(self, 5)
    }
    #[doc = "Bit 6 - PERR"]
    #[inline(always)]
    #[must_use]
    pub fn perr(&mut self) -> PerrW<IlsSpec> {
        PerrW::new(self, 6)
    }
}
#[doc = "The Interrupt Line Select register assigns an interrupt generated by a specific interrupt flag from the Interrupt Register to one of the two module interrupt lines. For interrupt generation the respective interrupt line has to be enabled via ILE\\[EINT0\\]
and ILE\\[EINT1\\].\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ils::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ils::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
pub struct IlsSpec;
impl crate::RegisterSpec for IlsSpec {
    type Ux = u32;
}
#[doc = "`read()` method returns [`ils::R`](R) reader structure"]
impl crate::Readable for IlsSpec {}
#[doc = "`write(|w| ..)` method takes [`ils::W`](W) writer structure"]
impl crate::Writable for IlsSpec {
    type Safety = crate::Unsafe;
    const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
    const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
}
#[doc = "`reset()` method sets ILS to value 0"]
impl crate::Resettable for IlsSpec {
    const RESET_VALUE: u32 = 0;
}
